Let's archive all the frontend files into a single directory:

# FRONTEND ARCHIVE - GamePath AI

## 1. COMPONENTS

### GamePathLogo.tsx
```typescript
import React from "react";
import { HexagonBorder } from "./logo/HexagonBorder";
import { CircuitPattern } from "./logo/CircuitPattern";
import { LogoNodes } from "./logo/LogoNodes";
import { LogoGradients } from "./logo/LogoGradients";

interface GamePathLogoProps {
  className?: string;
  size?: number;
}

export const GamePathLogo: React.FC<GamePathLogoProps> = ({ 
  className = "w-8 h-8",
  size = 32
}) => {
  return (
    <div className={className}>
      <svg 
        width={size} 
        height={size} 
        viewBox="0 0 100 100"  
        fill="none" 
        xmlns="http://www.w3.org/2000/svg"
        className="filter drop-shadow-[0_0_3px_rgba(51,195,240,0.3)]"
      >
        <HexagonBorder />
        <CircuitPattern />
        <LogoNodes />
        <LogoGradients />
      </svg>
    </div>
  );
};

export default GamePathLogo;
```

### Header.tsx
```typescript
import React from "react";
import { Settings, User } from "lucide-react";
import { Button } from "@/components/ui/button";
import GamePathLogo from "./GamePathLogo";
import { Link } from "react-router-dom";
import { Tooltip, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip";
import NotificationCenter from "./NotificationCenter";
import ConnectionToggle from "./ConnectionToggle";

const Header: React.FC = () => {
  return (
    <header className="bg-cyber-darkblue border-b border-cyber-purple/30 backdrop-blur-sm sticky top-0 z-10">
      <div className="container mx-auto flex justify-between items-center h-16 px-4">
        <div className="flex items-center h-full">
          <Link to="/dashboard" className="flex items-center gap-1.5">
            <GamePathLogo size={32} className="w-8 h-8" />
            <h1 className="text-2xl font-tech font-bold bg-gradient-to-r from-cyber-blue via-cyber-purple to-cyber-pink text-transparent bg-clip-text leading-none">
              GamePath AI
            </h1>
          </Link>
        </div>
        
        <div className="flex items-center space-x-4">
          <ConnectionToggle />
          
          <NotificationCenter />
          
          <Tooltip>
            <TooltipTrigger asChild>
              <Link to="/settings">
                <Button variant="ghost" size="icon" className="text-cyber-blue hover:text-cyber-purple hover:bg-cyber-blue/10">
                  <Settings size={20} />
                </Button>
              </Link>
            </TooltipTrigger>
            <TooltipContent>
              <p>Settings</p>
            </TooltipContent>
          </Tooltip>
          
          <div className="flex items-center space-x-2">
            <div className="w-8 h-8 rounded-full border-2 border-cyber-purple flex items-center justify-center bg-cyber-darkblue">
              <User size={18} className="text-cyber-purple" />
            </div>
            <span className="text-sm font-tech hidden md:inline-block">USER_01</span>
          </div>
        </div>
      </div>
    </header>
  );
};

export default Header;
```

## 2. HOOKS

### use-mobile.tsx
```typescript
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
```

### use-toast.ts
```typescript
import * as React from "react"
import type { ToastActionElement, ToastProps } from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
```

### use-notifications.tsx
```typescript
import { createContext, useContext, useState, useEffect, ReactNode } from "react";

export interface Notification {
  id: string;
  title: string;
  message: string;
  type: "optimization" | "performance" | "connection" | "update" | "trial";
  date: Date;
  read: boolean;
}

interface NotificationContextType {
  notifications: Notification[];
  addNotification: (notification: Omit<Notification, "id" | "date" | "read">) => void;
  clearNotification: (id: string) => void;
  markAllAsRead: () => void;
  hasUnread: boolean;
}

const NotificationContext = createContext<NotificationContextType | undefined>(undefined);

// Mock notifications data - in a real app these would be fetched from a backend
const mockNotifications: Notification[] = [
  {
    id: "1",
    title: "Route optimization applied",
    message: "A better route to the Tokyo server has been automatically applied.",
    type: "optimization",
    date: new Date(Date.now() - 1000 * 60 * 5), // 5 minutes ago
    read: false,
  },
  {
    id: "2",
    title: "High GPU temperature",
    message: "Your GPU is running at 82Â°C, which is above optimal levels.",
    type: "performance",
    date: new Date(Date.now() - 1000 * 60 * 25), // 25 minutes ago
    read: false,
  },
  {
    id: "3",
    title: "Network instability detected",
    message: "Packet loss increased to 5% on your connection.",
    type: "connection",
    date: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2 hours ago
    read: true,
  },
  {
    id: "4",
    title: "New version available",
    message: "GamePath AI v2.1.0 is now available for download.",
    type: "update",
    date: new Date(Date.now() - 1000 * 60 * 60 * 24), // 1 day ago
    read: true,
  },
  {
    id: "5",
    title: "Trial period ending soon",
    message: "Your Pro trial will expire in 5 days. Upgrade now to keep access.",
    type: "trial",
    date: new Date(Date.now() - 1000 * 60 * 60 * 48), // 2 days ago
    read: true,
  },
];

export const NotificationProvider = ({ children }: { children: ReactNode }) => {
  const [notifications, setNotifications] = useState<Notification[]>(mockNotifications);
  
  const hasUnread = notifications.some(notification => !notification.read);

  // In a real app, you would fetch notifications from an API
  // useEffect(() => {
  //   const fetchNotifications = async () => {
  //     // Fetch notifications from API
  //   };
  //   fetchNotifications();
  // }, []);

  const addNotification = (notification: Omit<Notification, "id" | "date" | "read">) => {
    const newNotification: Notification = {
      ...notification,
      id: Date.now().toString(),
      date: new Date(),
      read: false,
    };
    setNotifications(prev => [newNotification, ...prev]);
  };

  const clearNotification = (id: string) => {
    setNotifications(prev => prev.filter(n => n.id !== id));
  };

  const markAllAsRead = () => {
    setNotifications(prev => prev.map(n => ({ ...n, read: true })));
  };

  return (
    <NotificationContext.Provider
      value={{ 
        notifications, 
        addNotification, 
        clearNotification, 
        markAllAsRead,
        hasUnread
      }}
    >
      {children}
    </NotificationContext.Provider>
  );
};

export const useNotifications = () => {
  const context = useContext(NotificationContext);
  if (context === undefined) {
    throw new Error("useNotifications must be used within a NotificationProvider");
  }
  return context;
};
```

## 3. CONTEXTS

### CheckoutContext.tsx
```typescript
import React, { createContext, useContext, useState } from 'react';

export type BillingInterval = 'monthly' | 'quarterly' | 'annual';

export interface PlanFeature {
  name: string;
  included: boolean;
  info?: string;
}

export interface PricingPlan {
  id: string;
  name: string;
  description?: string;
  userCount: number;
  pricing: {
    monthly: number;
    quarterly: number;
    annual: number;
  };
  features?: PlanFeature[] | string[];
  popular?: boolean;
  color?: string;
}

interface CheckoutContextType {
  selectedPlan: PricingPlan | null;
  setSelectedPlan: (plan: PricingPlan) => void;
  billingInterval: BillingInterval;
  setBillingInterval: (interval: BillingInterval) => void;
  customerInfo: {
    firstName: string;
    lastName: string;
    email: string;
    address?: string;
  };
  setCustomerInfo: (info: any) => void;
  clearCheckout: () => void;
}

const defaultContext: CheckoutContextType = {
  selectedPlan: null,
  setSelectedPlan: () => {},
  billingInterval: 'monthly',
  setBillingInterval: () => {},
  customerInfo: {
    firstName: '',
    lastName: '',
    email: '',
    address: '',
  },
  setCustomerInfo: () => {},
  clearCheckout: () => {},
};

const CheckoutContext = createContext<CheckoutContextType>(defaultContext);

export const useCheckout = () => useContext(CheckoutContext);

export const CheckoutProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [selectedPlan, setSelectedPlan] = useState<PricingPlan | null>(null);
  const [billingInterval, setBillingInterval] = useState<BillingInterval>('monthly');
  const [customerInfo, setCustomerInfo] = useState({
    firstName: '',
    lastName: '',
    email: '',
    address: '',
  });

  const clearCheckout = () => {
    setSelectedPlan(null);
    setBillingInterval('monthly');
    setCustomerInfo({
      firstName: '',
      lastName: '',
      email: '',
      address: '',
    });
  };

  return (
    <CheckoutContext.Provider
      value={{
        selectedPlan,
        setSelectedPlan,
        billingInterval,
        setBillingInterval,
        customerInfo,
        setCustomerInfo,
        clearCheckout,
      }}
    >
      {children}
    </CheckoutContext.Provider>
  );
};
```

## 4. SERVICES

### subscriptionApi.ts
```typescript
// Subscription API service for GamePath AI
// This file contains placeholder API calls that will later be connected to the backend

// Define types for the API responses
export type SubscriptionPlan = 'player' | 'co-op' | 'alliance';
export type SubscriptionStatus = 'active' | 'canceled' | 'past_due' | 'trialing';
export type PaymentMethod = {
  id: string;
  type: 'card' | 'paypal';
  brand?: string;
  last4?: string;
  expMonth?: number;
  expYear?: number;
  isDefault: boolean;
};
export type AddOn = {
  id: string;
  name: string;
  price: number;
  isActive: boolean;
  includedInPlans?: SubscriptionPlan[];
};
export type Invoice = {
  id: string;
  date: Date;
  amount: number;
  status: 'paid' | 'pending' | 'failed' | 'refunded';
  items: Array<{
    name: string;
    amount: number;
  }>;
  pdfUrl?: string;
};

export type Subscription = {
  id: string;
  plan: SubscriptionPlan;
  status: SubscriptionStatus;
  currentPeriodStart: Date;
  currentPeriodEnd: Date;
  cancelAtPeriodEnd: boolean;
  amount: number;
  interval: 'month' | 'year';
  currency: string;
  users: number;
  addOns: string[];
};

// Mock API implementation
class SubscriptionApi {
  // Get current subscription details
  async getCurrentSubscription(): Promise<Subscription> {
    // Simulating API call delay
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Return mock data
    return {
      id: 'sub_123456',
      plan: 'co-op',
      status: 'active',
      currentPeriodStart: new Date(2025, 2, 15),
      currentPeriodEnd: new Date(2025, 3, 15),
      cancelAtPeriodEnd: false,
      amount: 17.99,
      interval: 'month',
      currency: 'USD',
      users: 2,
      addOns: ['vpn_integration', 'advanced_optimizer']
    };
  }
  
  // Get available add-ons
  async getAvailableAddOns(): Promise<AddOn[]> {
    // Simulating API call delay
    await new Promise(resolve => setTimeout(resolve, 300));
    
    // Return mock data
    return [
      {
        id: 'advanced_optimizer',
        name: 'Advanced Optimizer',
        price: 2.99,
        isActive: true,
        includedInPlans: ['alliance']
      },
      {
        id: 'power_manager',
        name: 'Power Manager',
        price: 1.99,
        isActive: false,
      },
      {
        id: 'vpn_integration',
        name: 'VPN Integration',
        price: 3.99,
        isActive: true,
        includedInPlans: ['co-op', 'alliance']
      }
    ];
  }
  
  // Get payment methods
  async getPaymentMethods(): Promise<PaymentMethod[]> {
    // Simulating API call delay
    await new Promise(resolve => setTimeout(resolve, 400));
    
    // Return mock data
    return [
      {
        id: 'pm_123456',
        type: 'card',
        brand: 'visa',
        last4: '4242',
        expMonth: 12,
        expYear: 2026,
        isDefault: true
      },
      {
        id: 'pm_654321',
        type: 'card',
        brand: 'mastercard',
        last4: '8765',
        expMonth: 3,
        expYear: 2025,
        isDefault: false
      }
    ];
  }
  
  // Add payment method
  async addPaymentMethod(paymentDetails: any): Promise<PaymentMethod> {
    // In a real implementation, this would submit to a payment processor
    // Simulating API call delay
    await new Promise(resolve => setTimeout(resolve, 600));
    
    // Return mock data for the new payment method
    return {
      id: 'pm_new123',
      type: 'card',
      brand: paymentDetails.brand || 'visa',
      last4: paymentDetails.last4 || '1234',
      expMonth: paymentDetails.expMonth || 12,
      expYear: paymentDetails.expYear || 2027,
      isDefault: false
    };
  }
  
  // Set default payment method
  async setDefaultPaymentMethod(paymentMethodId: string): Promise<{ success: boolean }> {
    // Simulating API call delay
    await new Promise(resolve => setTimeout(resolve, 300));
    
    // Return success response
    return { success: true };
  }
  
  // Delete payment method
  async deletePaymentMethod(paymentMethodId: string): Promise<{ success: boolean }> {
    // Simulating API call delay
    await new Promise(resolve => setTimeout(resolve, 400));
    
    // Return success response
    return { success: true };
  }
  
  // Get billing history
  async getBillingHistory(): Promise<Invoice[]> {
    // Simulating API call delay
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Return mock data
    return [
      {
        id: 'inv_123456',
        date: new Date(2025, 2, 15),
        amount: 17.99,
        status: 'paid',
        items: [
          { name: 'Co-op Plan', amount: 17.99 }
        ]
      },
      {
        id: 'inv_123455',
        date: new Date(2025, 1, 15),
        amount: 20.98,
        status: 'paid',
        items: [
          { name: 'Co-op Plan', amount: 17.99 },
          { name: 'Advanced Optimizer', amount: 2.99 }
        ]
      },
      {
        id: 'inv_123454',
        date: new Date(2025, 0, 15),
        amount: 17.99,
        status: 'paid',
        items: [
          { name: 'Co-op Plan', amount: 17.99 }
        ]
      },
      {
        id: 'inv_123453',
        date: new Date(2024, 11, 15),
        amount: 9.99,
        status: 'refunded',
        items: [
          { name: 'Player Plan', amount: 9.99 }
        ]
      }
    ];
  }
  
  // Get invoice details
  async getInvoiceDetails(invoiceId: string): Promise<Invoice> {
    // Simulating API call delay
    await new Promise(resolve => setTimeout(resolve, 300));
    
    // Return mock invoice data
    return {
      id: invoiceId,
      date: new Date(2025, 2, 15),
      amount: 17.99,
      status: 'paid',
      items: [
        { name: 'Co-op Plan', amount: 17.99 }
      ],
      pdfUrl: '#'
    };
  }
  
  // Update subscription plan
  async updateSubscriptionPlan(planId: string, options?: { addOns?: string[] }): Promise<Subscription> {
    // Simulating API call delay
    await new Promise(resolve => setTimeout(resolve, 700));
    
    // Return updated subscription
    return {
      id: 'sub_123456',
      plan: planId as SubscriptionPlan,
      status: 'active',
      currentPeriodStart: new Date(2025, 2, 15),
      currentPeriodEnd: new Date(2025, 3, 15),
      cancelAtPeriodEnd: false,
      amount: planId === 'player' ? 9.99 : planId === 'co-op' ? 17.99 : 29.99,
      interval: 'month',
      currency: 'USD',
      users: planId === 'player' ? 1 : planId === 'co-op' ? 2 : 5,
      addOns: options?.addOns || ['vpn_integration']
    };
  }
  
  // Cancel subscription
  async cancelSubscription(reason: string): Promise<{ success: boolean, message: string }> {
    // Simulating API call delay
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Return success response
    return { 
      success: true, 
      message: "Your subscription has been canceled and will remain active until the end of your billing period."
    };
  }
  
  // Resume canceled subscription
  async resumeSubscription(): Promise<{ success: boolean, message: string }> {
    // Simulating API call delay
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Return success response
    return { 
      success: true, 
      message: "Your subscription has been successfully resumed."
    };
  }
}

export const subscriptionApi = new SubscriptionApi();
```

## 5. LOCALIZATION FILES

### en-US.json
```json
{
  "header": {
    "appName": "GamePath AI",
    "features": "Features",
    "technology": "Technology", 
    "pricing": "Pricing",
    "login": "Login",
    "getStarted": "Get Started"
  },
  "technology": {
    "title": "GamePath AI Technology",
    "subtitle": "The advanced technology powering your gaming optimization experience",
    "adaptiveRouting": {
      "title": "Adaptive Routing",
      "description": "Our proprietary algorithms analyze network conditions in real-time to find the optimal path for your gaming data.",
      "dynamicPathSelection": {
        "title": "Dynamic Path Selection",
        "description": "Automatically selects the best network path based on real-time conditions"
      },
      "serverSpecificOptimization": {
        "title": "Server Optimization",
        "description": "Custom routing profiles for specific game servers"
      },
      "multiPointRouting": {
        "title": "Multi-Point Routing",
        "description": "Uses multiple connection points to ensure the most stable experience"
      },
      "averageLatencyReduction": {
        "title": "Average Latency Reduction",
        "value": "45%"
      }
    },
    "performanceAI": {
      "title": "Performance AI",
      "description": "Machine learning systems that adapt to your hardware configuration and usage patterns for optimal performance.",
      "adaptiveResourceAllocation": {
        "title": "Adaptive Resource Allocation",
        "description": "Dynamically allocates system resources based on game requirements"
      },
      "gameSpecificProfiles": {
        "title": "Game-Specific Profiles",
        "description": "Custom optimization profiles for thousands of popular games"
      },
      "backgroundProcessManagement": {
        "title": "Background Process Management",
        "description": "Intelligently manages system processes to prioritize gaming performance"
      },
      "fpsImprovement": {
        "title": "Average FPS Improvement",
        "value": "27%"
      }
    },
    "globalNetwork": {
      "title": "Global Network",
      "description": "Access to optimized routes across our worldwide server infrastructure for low-latency gaming anywhere."
    },
    "security": {
      "title": "Gaming Security",
      "description": "Advanced protection features that keep your gaming experience safe and your data private.",
      "ddosProtection": {
        "title": "DDoS Protection",
        "description": "Real-time protection against denial-of-service attacks"
      },
      "ipMasking": {
        "title": "IP Masking",
        "description": "Hide your real IP address to prevent targeting and swatting"
      },
      "antiCheatCompatibility": {
        "title": "Anti-Cheat Compatibility",
        "description": "Full compatibility with all major anti-cheat systems"
      },
      "protectionRate": {
        "title": "Attack Prevention Rate",
        "value": "99.7%"
      }
    },
    "vpn": {
      "title": "Gaming VPN",
      "description": "Our specialized VPN optimized specifically for gaming performance and security.",
      "geoRestrictionBypass": {
        "title": "Geo-Restriction Bypass",
        "description": "Access games and servers from any region regardless of your location"
      },
      "splitTunneling": {
        "title": "Split Tunneling",
        "description": "Route only game traffic through our optimized network"
      },
      "ispThrottlingPrevention": {
        "title": "ISP Throttling Prevention",
        "description": "Bypass ISP speed limits and traffic shaping for maximum throughput"
      },
      "globalServers": {
        "title": "Global Server Network",
        "value": "250+ Locations"
      }
    },
    "cta": {
      "description": "Experience significant latency reduction and performance improvements with our adaptive gaming technology.",
      "startFreeTrial": "Start Free Trial",
      "viewPricing": "View Pricing"
    }
  },
  "games": {
    "meta": {
      "description": "Optimize your {game} experience with GamePath AI. Reduce latency, eliminate packet loss, and boost FPS."
    },
    "notFound": {
      "title": "Game Not Found",
      "message": "Sorry, we couldn't find information about this game. Please check the URL or explore our supported games below."
    },
    "hero": {
      "title": "Optimize Your {game} Experience",
      "subtitle": "Reduce lag, increase FPS, and gain a competitive edge with GamePath AI's game-specific optimization.",
      "optimizeNow": "Optimize Now",
      "learnMore": "Learn More"
    },
    "metrics": {
      "latency": "Latency Improvement",
      "fps": "FPS Improvement",
      "packetLoss": "Packet Loss Reduction",
      "jitter": "Jitter Reduction",
      "improvement": "Improvement",
      "reduction": "Reduction"
    },
    "performanceMetrics": {
      "title": "{game} Performance Metrics",
      "subtitle": "Our users see significant improvements in all key performance areas when playing with GamePath AI."
    },
    "technicalImprovements": {
      "title": "Technical Improvements for {game}",
      "subtitle": "See the tangible differences our technology makes to your gaming experience.",
      "before": "BEFORE",
      "after": "AFTER"
    },
    "testimonials": {
      "title": "{game} Player Testimonials",
      "subtitle": "Hear what players are saying about their experience with GamePath AI."
    },
    "cta": {
      "title": "Ready to Dominate in {game}?",
      "description": "Join thousands of {game} players who have improved their gaming experience with GamePath AI. Achieve up to {latency}% lower latency and {fps}% higher FPS.",
      "latencyReduction": "Latency Reduction",
      "fpsImprovement": "FPS Improvement",
      "packetLossReduction": "Packet Loss Reduction",
      "tryForFree": "Try For Free",
      "exploreFeatures": "Explore Features"
    },
    "card": {
      "viewDetails": "View Details"
    }
  }
}
```

### es-ES.json
```json
{
  "header": {
    "appName": "GamePath IA",
    "features": "CaracterÃ­sticas",
    "technology": "TecnologÃ­a", 
    "pricing": "Precios",
    "login": "Iniciar SesiÃ³n",
    "getStarted": "Comenzar"
  },
  "technology": {
    "title": "TecnologÃ­a GamePath IA",
    "subtitle": "La tecnologÃ­a avanzada que impulsa tu experiencia de optimizaciÃ³n de juegos",
    "adaptiveRouting": {
      "title": "Enrutamiento Adaptativo",
      "description": "Nuestros algoritmos propietarios analizan las condiciones de la red en tiempo real para encontrar la ruta Ã³ptima para tus datos de juego."
    },
    "performanceAI": {
      "title": "IA de Rendimiento",
      "description": "Sistemas de aprendizaje automÃ¡tico que se adaptan a tu configuraciÃ³n de hardware y patrones de uso para un rendimiento Ã³ptimo."
    },
    "globalNetwork": {
      "title": "Red Global",
      "description": "Acceso a rutas optimizadas a travÃ©s de nuestra infraestructura de servidores mundial para juegos con baja latencia en cualquier lugar."
    },
    "security": {
      "title": "Seguridad de Juegos",
      "description": "Funciones avanzadas de protecciÃ³n que mantienen tu experiencia de juego segura y tus datos privados.",
      "ddosProtection": {
        "title": "ProtecciÃ³n DDoS",
        "description": "ProtecciÃ³n en tiempo real contra ataques de denegaciÃ³n de servicio"
      },
      "ipMasking": {
        "title": "Enmascaramiento de IP",
        "description": "Oculta tu direcciÃ³n IP real para evitar ser objetivo de ataques"
      },
      "antiCheatCompatibility": {
        "title": "Compatibilidad con Anti-Trampas",
        "description": "Compatibilidad completa con todos los principales sistemas anti-trampas"
      },
      "protectionRate": {
        "title": "Tasa de PrevenciÃ³n de Ataques",
        "value": "99,7%"
      }
    },
    "vpn": {
      "title": "VPN para Juegos",
      "description": "Nuestra VPN especializada optimizada especÃ­ficamente para rendimiento y seguridad en juegos.",
      "geoRestrictionBypass": {
        "title": "Bypass de Restricciones GeogrÃ¡ficas",
        "description": "Accede a juegos y servidores desde cualquier regiÃ³n independientemente de tu ubicaciÃ³n"
      },
      "splitTunneling": {
        "title": "TÃºnel Dividido",
        "description": "Enruta solo el trÃ¡fico de juegos a travÃ©s de nuestra red optimizada"
      },
      "ispThrottlingPrevention": {
        "title": "PrevenciÃ³n de Limitaciones ISP",
        "description": "Evita los lÃ­mites de velocidad y la modelaciÃ³n de trÃ¡fico del ISP para un mÃ¡ximo rendimiento"
      },
      "globalServers": {
        "title": "Red de Servidores Globales",
        "value": "MÃ¡s de 250 ubicaciones"
      }
    },
    "cta": {
      "description": "Experimenta una reducciÃ³n significativa de la latencia y mejoras de rendimiento con nuestra tecnologÃ­a de juego adaptativa.",
      "startFreeTrial": "Comenzar Prueba Gratuita",
      "viewPricing": "Ver Precios",
      "checkout": {
        "plan": "Confirmar Plan",
        "payment": "Detalles de Pago",
        "processing": "Procesando",
        "success": "Â¡Ãxito!"
      }
    }
  },
  "games": {
    "meta": {
      "description": "Optimiza tu experiencia de {game} con GamePath IA. Reduce la latencia, elimina la pÃ©rdida de paquetes y aumenta los FPS."
    },
    "notFound": {
      "title": "Juego No Encontrado",
      "message": "Lo sentimos, no pudimos encontrar informaciÃ³n sobre este juego. Por favor, verifica la URL o explora nuestros juegos soportados."
    },
    "hero": {
      "title": "Optimiza Tu Experiencia de {game}",
      "subtitle": "Reduce el lag, aumenta los FPS y obtÃ©n una ventaja competitiva con la optimizaciÃ³n especÃ­fica para juegos de GamePath IA.",
      "optimizeNow": "Optimizar Ahora",
      "learnMore": "Saber MÃ¡s"
    },
    "metrics": {
      "latency": "Mejora de Latencia",
      "fps": "Mejora de FPS",
      "packetLoss": "ReducciÃ³n de PÃ©rdida de Paquetes",
      "jitter": "ReducciÃ³n de FluctuaciÃ³n",
      "improvement": "Mejora",
      "reduction": "ReducciÃ³n"
    },
    "performanceMetrics": {
      "title": "MÃ©tricas de Rendimiento de {game}",
      "subtitle": "Nuestros usuarios ven mejoras significativas en todas las Ã¡reas clave de rendimiento al jugar con GamePath IA."
    },
    "technicalImprovements": {
      "title": "Mejoras TÃ©cnicas para {game}",
      "subtitle": "Observa las diferencias tangibles que nuestra tecnologÃ­a aporta a tu experiencia de juego.",
      "before": "ANTES",
      "after": "DESPUÃS"
    },
    "testimonials": {
      "title": "Testimonios de Jugadores de {game}",
      "subtitle": "Escucha lo que dicen los jugadores sobre su experiencia con GamePath IA."
    },
    "cta": {
      "title": "Â¿Listo para Dominar en {game}?",
      "description": "Ãnete a miles de jugadores de {game} que han mejorado su experiencia de juego con GamePath IA. Logra hasta un {latency}% menos de latencia y un {fps}% mÃ¡s de FPS.",
      "latencyReduction": "ReducciÃ³n de Latencia",
      "fpsImprovement": "Mejora de FPS",
      "packetLossReduction": "ReducciÃ³n de PÃ©rdida de Paquetes",
      "tryForFree": "PruÃ©balo Gratis",
      "exploreFeatures": "Explorar CaracterÃ­sticas"
    },
    "card": {
      "viewDetails": "Ver Detalles"
    }
  },
  "checkout": {
    "plan": {
      "title": "Confirmar Tu Plan",
      "subtitle": "Revisa tu selecciÃ³n y ciclo de facturaciÃ³n antes de continuar",
      "selectedPlan": "Plan Seleccionado",
      "billingCycle": "Ciclo de FacturaciÃ³n",
      "monthly": "Mensual",
      "quarterly": "Trimestral",
      "annual": "Anual",
      "savePercent": "Ahorra ~{percent}%",
      "continueToPayment": "Continuar al Pago"
    },
    "payment": {
      "title": "Detalles de Pago",
      "subtitle": "Ingresa tu informaciÃ³n para completar tu compra",
      "customerInfo": "InformaciÃ³n del Cliente",
      "firstName": "Nombre",
      "lastName": "Apellido",
      "email": "Correo electrÃ³nico",
      "paymentInfo": "InformaciÃ³n de Pago",
      "cardDetails": "Detalles de la tarjeta",
      "securePayment": "Pago Seguro",
      "encrypted": "Tu informaciÃ³n de pago estÃ¡ cifrada y segura",
      "terms": "Al completar tu compra, aceptas nuestros TÃ©rminos de Servicio y PolÃ­tica de Privacidad",
      "completePurchase": "Completar Compra"
    },
    "processing": {
      "title": "Procesando Tu SuscripciÃ³n",
      "subtitle": "Espera mientras configuramos tu cuenta",
      "settingUp": "Configurando tu cuenta de GamePath IA",
      "takeMoment": "Esto solo tomarÃ¡ un momento",
      "step1": "Verificando informaciÃ³n de pago",
      "step2": "Creando tu cuenta",
      "step3": "Configurando tu suscripciÃ³n",
      "secure": "Todas las transacciones son seguras y cifradas"
    },
    "success": {
      "title": "Â¡SuscripciÃ³n Confirmada!",
      "subtitle": "Tu viaje de optimizaciÃ³n de GamePath IA comienza ahora",
      "welcome": "Bienvenido a GamePath IA",
      "activated": "Tu suscripciÃ³n ha sido activada exitosamente",
      "details": "Detalles de la SuscripciÃ³n",
      "plan": "Plan",
      "billing": "FacturaciÃ³n",
      "nextPayment": "PrÃ³ximo pago el {date}",
      "includes": "Tu suscripciÃ³n incluye:",
      "routeOpt": "OptimizaciÃ³n de Ruta",
      "reduceLatency": "Reduce la latencia hasta un 45%",
      "perfEnhance": "Mejora de Rendimiento",
      "boostFps": "Aumenta los FPS hasta un 20%",
      "nextSteps": "PrÃ³ximos Pasos",
      "downloadClient": "Descargar Cliente de GamePath IA",
      "installSoftware": "Instala nuestro software de optimizaciÃ³n para comenzar",
      "download": "Descargar Cliente",
      "dashboardSetup": "ConfiguraciÃ³n del Panel",
      "configureProfile": "Configura tu perfil de juego y preferencias",
      "goToDashboard": "Ir al Panel",
      "accessDashboard": "Acceder a Tu Panel"
    }
  }
}
```

### fr-FR.json
```json
{
  "header": {
    "appName": "GamePath IA",
    "features": "FonctionnalitÃ©s",
    "technology": "Technologie", 
    "pricing": "Tarification",
    "login": "Connexion",
    "getStarted": "Commencer"
  },
  "technology": {
    "title": "Technologie GamePath IA",
    "subtitle": "La technologie avancÃ©e qui alimente votre expÃ©rience d'optimisation de jeu",
    "adaptiveRouting": {
      "title": "Routage Adaptatif",
      "description": "Nos algorithmes propriÃ©taires analysent les conditions du rÃ©seau en temps rÃ©el pour trouver le chemin optimal pour vos donnÃ©es de jeu."
    },
    "performanceAI": {
      "title": "IA de Performance",
      "description": "SystÃ¨mes d'apprentissage automatique qui s'adaptent Ã  votre configuration matÃ©rielle et Ã  vos habitudes d'utilisation pour des performances optimales."
    },
    "globalNetwork": {
      "title": "RÃ©seau Mondial",
      "description": "AccÃ¨s Ã  des routes optimisÃ©es Ã  travers notre infrastructure mondiale de serveurs pour des jeux Ã  faible latence partout."
    },
    "security": {
      "title": "SÃ©curitÃ© des Jeux",
      "description": "FonctionnalitÃ©s de protection avancÃ©es qui gardent votre expÃ©rience de jeu sÃ©curisÃ©e et vos donnÃ©es privÃ©es.",
      "ddosProtection": {
        "title": "Protection DDoS",
        "description": "Protection en temps rÃ©el contre les attaques par dÃ©ni de service"
      },
      "ipMasking": {
        "title": "Masquage d'IP",
        "description": "Masquez votre adresse IP rÃ©elle pour Ã©viter le ciblage"
      },
      "antiCheatCompatibility": {
        "title": "CompatibilitÃ© Anti-Triche",
        "description": "CompatibilitÃ© complÃ¨te avec tous les principaux systÃ¨mes anti-triche"
      },
      "protectionRate": {
        "title": "Taux de PrÃ©vention d'Attaques",
        "value": "99,7%"
      }
    },
    "vpn": {
      "title": "VPN pour les Jeux",
      "description": "Notre VPN spÃ©cialisÃ© optimisÃ© spÃ©cifiquement pour la performance et la sÃ©curitÃ© des jeux.",
      "geoRestrictionBypass": {
        "title": "Contournement des Restrictions GÃ©ographiques",
        "description": "AccÃ©dez aux jeux et serveurs de n'importe quelle rÃ©gion, quelle que soit votre localisation"
      },
      "splitTunneling": {
        "title": "Tunneling DivisÃ©",
        "description": "Acheminez uniquement le trafic de jeu via notre rÃ©seau optimisÃ©"
      },
      "ispThrottlingPrevention": {
        "title": "PrÃ©vention de Limitation FAI",
        "description": "Contournez les limites de vitesse et la mise en forme du trafic des FAI pour un dÃ©bit maximal"
      },
      "globalServers": {
        "title": "RÃ©seau de Serveurs Mondial",
        "value": "Plus de 250 Emplacements"
      }
    },
    "cta": {
      "description": "ExpÃ©rimentez une rÃ©duction significative de la latence et des amÃ©liorations de performance avec notre technologie de jeu adaptative.",
      "startFreeTrial": "Commencer l'Essai Gratuit",
      "viewPricing": "Voir les Tarifs"
    }
  },
  "games": {
    "meta": {
      "description": "Optimisez votre expÃ©rience {game} avec GamePath IA. RÃ©duisez la latence, Ã©liminez les pertes de paquets et augmentez les FPS."
    },
    "notFound": {
      "title": "Jeu Non TrouvÃ©",
      "message": "DÃ©solÃ©, nous n'avons pas trouvÃ© d'informations sur ce jeu. Veuillez vÃ©rifier l'URL ou explorer nos jeux pris en charge ci-dessous."
    },
    "hero": {
      "title": "Optimisez Votre ExpÃ©rience {game}",
      "subtitle": "RÃ©duisez les lags, augmentez les FPS et obtenez un avantage concurrentiel avec l'optimisation spÃ©cifique aux jeux de GamePath IA.",
      "optimizeNow": "Optimiser Maintenant",
      "learnMore": "En Savoir Plus"
    },
    "metrics": {
      "latency": "AmÃ©lioration de la Latence",
      "fps": "AmÃ©lioration des FPS",
      "packetLoss": "RÃ©duction des Pertes de Paquets",
      "jitter": "RÃ©duction des Fluctuations",
      "improvement": "AmÃ©lioration",
      "reduction": "RÃ©duction"
    },
    "performanceMetrics": {
      "title": "MÃ©triques de Performance pour {game}",
      "subtitle": "Nos utilisateurs constatent des amÃ©liorations significatives dans tous les domaines de performance clÃ©s lorsqu'ils jouent avec GamePath IA."
    },
    "technicalImprovements": {
      "title": "AmÃ©liorations Techniques pour {game}",
      "subtitle": "Voyez les diffÃ©rences tangibles que notre technologie apporte Ã  votre expÃ©rience de jeu.",
      "before": "AVANT",
      "after": "APRÃS"
    },
    "testimonials": {
      "title": "TÃ©moignages des Joueurs de {game}",
      "subtitle": "DÃ©couvrez ce que les joueurs disent de leur expÃ©rience avec GamePath IA."
    },
    "cta": {
      "title": "PrÃªt Ã  Dominer dans {game}?",
      "description": "Rejoignez des milliers de joueurs de {game} qui ont amÃ©liorÃ© leur expÃ©rience de jeu avec GamePath IA. Obtenez jusqu'Ã  {latency}% de latence en moins et {fps}% de FPS en plus.",
      "latencyReduction": "RÃ©duction de Latence",
      "fpsImprovement": "AmÃ©lioration des FPS",
      "packetLossReduction": "RÃ©duction des Pertes de Paquets",
      "tryForFree": "Essayer Gratuitement",
      "exploreFeatures": "Explorer les FonctionnalitÃ©s"
    },
    "card": {
      "viewDetails": "Voir les DÃ©tails"
    }
  }
}
```

### de-DE.json
```json
{
  "header": {
    "appName": "GamePath KI",
    "features": "Funktionen",
    "technology": "Technologie", 
    "pricing": "Preise",
    "login": "Anmelden",
    "getStarted": "Loslegen"
  },
  "technology": {
    "title": "GamePath KI Technologie",
    "subtitle": "Die fortschrittliche Technologie, die Ihre Spieloptimierungserfahrung antreibt",
    "adaptiveRouting": {
      "title": "Adaptive Routing",
      "description": "Unsere proprietÃ¤ren Algorithmen analysieren Netzwerkbedingungen in Echtzeit, um den optimalen Pfad fÃ¼r Ihre Spieldaten zu finden."
    },
    "performanceAI": {
      "title": "Performance KI",
      "description": "Maschinelle Lernsysteme, die sich an Ihre Hardware-Konfiguration und Nutzungsmuster anpassen, fÃ¼r optimale Leistung."
    },
    "globalNetwork": {
      "title": "Globales Netzwerk",
      "description": "Zugriff auf optimierte Routen Ã¼ber unsere weltweite Serverinfrastruktur fÃ¼r Spiele mit niedriger Latenz Ã¼berall."
    }
  }
}
```

### ru-RU.json
```json
{
  "header": {
    "appName": "GamePath ÐÐ",
    "features": "ÐÐ¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾ÑÑÐ¸",
    "technology": "Ð¢ÐµÑÐ½Ð¾Ð»Ð¾Ð³Ð¸Ñ", 
    "pricing": "Ð¦ÐµÐ½Ñ",
    "login": "ÐÑÐ¾Ð´",
    "getStarted": "ÐÐ°ÑÐ°ÑÑ"
  },
  "technology": {
    "title": "Ð¢ÐµÑÐ½Ð¾Ð»Ð¾Ð³Ð¸Ñ GamePath ÐÐ",
    "subtitle": "ÐÐµÑÐµÐ´Ð¾Ð²Ð°Ñ ÑÐµÑÐ½Ð¾Ð»Ð¾Ð³Ð¸Ñ, Ð¾Ð±ÐµÑÐ¿ÐµÑÐ¸Ð²Ð°ÑÑÐ°Ñ Ð¾Ð¿ÑÐ¸Ð¼Ð¸Ð·Ð°ÑÐ¸Ñ Ð¸Ð³ÑÐ¾Ð²Ð¾Ð³Ð¾ Ð¿ÑÐ¾ÑÐµÑÑÐ°",
    "adaptiveRouting": {
      "title": "ÐÐ´Ð°Ð¿ÑÐ¸Ð²Ð½Ð°Ñ Ð¼Ð°ÑÑÑÑÑÐ¸Ð·Ð°ÑÐ¸Ñ",
      "description": "ÐÐ°ÑÐ¸ Ð¿ÑÐ¾Ð¿ÑÐ¸ÐµÑÐ°ÑÐ½ÑÐµ Ð°Ð»Ð³Ð¾ÑÐ¸ÑÐ¼Ñ Ð°Ð½Ð°Ð»Ð¸Ð·Ð¸ÑÑÑÑ ÑÐ¾ÑÑÐ¾ÑÐ½Ð¸Ðµ ÑÐµÑÐ¸ Ð² ÑÐµÐ°Ð»ÑÐ½Ð¾Ð¼ Ð²ÑÐµÐ¼ÐµÐ½Ð¸, ÑÑÐ¾Ð±Ñ Ð½Ð°Ð¹ÑÐ¸ Ð¾Ð¿ÑÐ¸Ð¼Ð°Ð»ÑÐ½ÑÐ¹ Ð¿ÑÑÑ Ð´Ð»Ñ Ð²Ð°ÑÐ¸Ñ Ð¸Ð³ÑÐ¾Ð²ÑÑ Ð´Ð°Ð½Ð½ÑÑ."
    },
    "performanceAI": {
      "title": "ÐÐ Ð¿ÑÐ¾Ð¸Ð·Ð²Ð¾Ð´Ð¸ÑÐµÐ»ÑÐ½Ð¾ÑÑÐ¸",
      "description": "Ð¡Ð¸ÑÑÐµÐ¼Ñ Ð¼Ð°ÑÐ¸Ð½Ð½Ð¾Ð³Ð¾ Ð¾Ð±ÑÑÐµÐ½Ð¸Ñ, ÐºÐ¾ÑÐ¾ÑÑÐµ Ð°Ð´Ð°Ð¿ÑÐ¸ÑÑÑÑÑÑ Ðº ÐºÐ¾Ð½ÑÐ¸Ð³ÑÑÐ°ÑÐ¸Ð¸ Ð²Ð°ÑÐµÐ³Ð¾ Ð¾Ð±Ð¾ÑÑÐ´Ð¾Ð²Ð°Ð½Ð¸Ñ Ð¸ Ð¼Ð¾Ð´ÐµÐ»ÑÐ¼ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð¸Ñ Ð´Ð»Ñ Ð¾Ð¿ÑÐ¸Ð¼Ð°Ð»ÑÐ½Ð¾Ð¹ Ð¿ÑÐ¾Ð¸Ð·Ð²Ð¾Ð´Ð¸ÑÐµÐ»ÑÐ½Ð¾ÑÑÐ¸."
    },
    "globalNetwork": {
      "title": "ÐÐ»Ð¾Ð±Ð°Ð»ÑÐ½Ð°Ñ ÑÐµÑÑ",
      "description": "ÐÐ¾ÑÑÑÐ¿ Ðº Ð¾Ð¿ÑÐ¸Ð¼Ð¸Ð·Ð¸ÑÐ¾Ð²Ð°Ð½Ð½ÑÐ¼ Ð¼Ð°ÑÑÑÑÑÐ°Ð¼ ÑÐµÑÐµÐ· Ð½Ð°ÑÑ Ð²ÑÐµÐ¼Ð¸ÑÐ½ÑÑ ÑÐµÑÐ²ÐµÑÐ½ÑÑ Ð¸Ð½ÑÑÐ°ÑÑÑÑÐºÑÑÑÑ Ð´Ð»Ñ Ð¸Ð³Ñ Ñ Ð½Ð¸Ð·ÐºÐ¾Ð¹ Ð·Ð°Ð´ÐµÑÐ¶ÐºÐ¾Ð¹ Ð² Ð»ÑÐ±Ð¾Ð¹ ÑÐ¾ÑÐºÐµ Ð¼Ð¸ÑÐ°."
    }
  }
}
```

### ja-JP.json
```json
{
  "header": {
    "appName": "GamePath AI",
    "features": "æ©è½",
    "technology": "ãã¯ãã­ã¸ã¼", 
    "pricing": "æé",
    "login": "ã­ã°ã¤ã³",
    "getStarted": "å§ãã"
  },
  "technology": {
    "title": "GamePath AI ãã¯ãã­ã¸ã¼",
    "subtitle": "ã²ã¼ã æé©åä½é¨ãæ¯ããåé²ãã¯ãã­ã¸ã¼",
    "adaptiveRouting": {
      "title": "ã¢ãããã£ãã«ã¼ãã£ã³ã°",
      "description": "å½ç¤¾ç¬èªã®ã¢ã«ã´ãªãºã ããããã¯ã¼ã¯ç¶æ³ããªã¢ã«ã¿ã¤ã ã§åæããã²ã¼ã ãã¼ã¿ã®æé©ãªçµè·¯ãè¦ã¤ãã¾ãã"
    },
    "performanceAI": {
      "title": "ããã©ã¼ãã³ã¹AI",
      "description": "ãã¼ãã¦ã§ã¢æ§æã¨ä½¿ç¨ãã¿ã¼ã³ã«é©å¿ããæé©ãªããã©ã¼ãã³ã¹ãå®ç¾ããæ©æ¢°å­¦ç¿ã·ã¹ãã ã"
    },
    "globalNetwork": {
      "title": "ã°ã­ã¼ãã«ãããã¯ã¼ã¯",
      "description": "ä¸çä¸­ã®ãµã¼ãã¼ã¤ã³ãã©ãéãã¦æé©åãããã«ã¼ãã«ã¢ã¯ã»ã¹ããã©ãã§ãä½éå»¶ã®ã²ã¼ã ãå®ç¾ãã¾ãã"
    }
  }
}
```

### ko-KR.json
```json
{
  "header": {
    "appName": "GamePath AI",
    "features": "ê¸°ë¥",
    "technology": "ê¸°ì ", 
    "pricing": "ê°ê²©",
    "login": "ë¡ê·¸ì¸",
    "getStarted": "ììíê¸°"
  },
  "technology": {
    "title": "GamePath AI ê¸°ì ",
    "subtitle": "ê²ì ìµì í ê²½íì ì§ìíë ê³ ê¸ ê¸°ì ",
    "adaptiveRouting": {
      "title": "ì ìí ë¼ì°í",
      "description": "ëì  ìê³ ë¦¬ì¦ì´ ë¤í¸ìí¬ ìíë¥¼ ì¤ìê°ì¼ë¡ ë¶ìíì¬ ê²ì ë°ì´í°ì ìµì  ê²½ë¡ë¥¼ ì°¾ìµëë¤."
    },
    "performanceAI": {
      "title": "ì±ë¥ AI",
      "description": "ìµì ì ì±ë¥ì ìí´ íëì¨ì´ êµ¬ì± ë° ì¬ì© í¨í´ì ì ìíë ë¨¸ì  ë¬ë ìì¤í."
    },
    "globalNetwork": {
      "title": "ê¸ë¡ë² ë¤í¸ìí¬",
      "description": "ì  ì¸ê³ ìë² ì¸íë¼ë¥¼ íµí ìµì íë ê²½ë¡ë¡ ì´ëìë ì§ì° ìê°ì´ ì§§ì ê²ìì ì¦ê¸¸ ì ììµëë¤."
    }
  }
}
```

### pt-BR.json
```json
{
  "header": {
    "appName": "GamePath IA",
    "features": "Recursos",
    "technology": "Tecnologia", 
    "pricing": "PreÃ§os",
    "login": "Entrar",
    "getStarted": "ComeÃ§ar"
  },
  "technology": {
    "title": "Tecnologia GamePath IA",
    "subtitle": "A tecnologia avanÃ§ada que impulsiona sua experiÃªncia de otimizaÃ§Ã£o de jogos",
    "adaptiveRouting": {
      "title": "Roteamento Adaptativo",
      "description": "Nossos algoritmos proprietÃ¡rios analisam as condiÃ§Ãµes da rede em tempo real para encontrar o caminho ideal para seus dados de jogo."
    },
    "performanceAI": {
      "title": "IA de Desempenho",
      "description": "Sistemas de aprendizado de mÃ¡quina que se adaptam Ã  configuraÃ§Ã£o do seu hardware e padrÃµes de uso para um desempenho ideal."
    },
    "globalNetwork": {
      "title": "Rede Global",
      "description": "Acesso a rotas otimizadas em nossa infraestrutura de servidores mundial para jogos com baixa latÃªncia em qualquer lugar."
    }
  }
}
```

### zh-CN.json
```json
{
  "header": {
    "appName": "GamePath AI",
    "features": "åè½",
    "technology": "ææ¯", 
    "pricing": "ä»·æ ¼",
    "login": "ç»å½",
    "getStarted": "å¼å§ä½¿ç¨"
  },
  "technology": {
    "title": "GamePath AI ææ¯",
    "subtitle": "ä¸ºæ¨çæ¸¸æä¼åä½éªæä¾æ¯æçåè¿ææ¯",
    "adaptiveRouting": {
      "title": "èªéåºè·¯ç±",
      "description": "æä»¬ä¸æçç®æ³å®æ¶åæç½ç»æ¡ä»¶ï¼ä¸ºæ¨çæ¸¸ææ°æ®æ¾å°æä½³è·¯å¾ã",
      "dynamicPathSelection": {
        "title": "å¨æè·¯å¾éæ©",
        "description": "æ ¹æ®å®æ¶æ¡ä»¶èªå¨éæ©æä½³ç½ç»è·¯å¾"
      },
      "serverSpecificOptimization": {
        "title": "æå¡å¨ä¼å",
        "description": "ç¹å®æ¸¸ææå¡å¨çèªå®ä¹è·¯ç±éç½®"
      },
      "multiPointRouting": {
        "title": "å¤ç¹è·¯ç±",
        "description": "ä½¿ç¨å¤ä¸ªè¿æ¥ç¹ç¡®ä¿æç¨³å®çä½éª"
      },
      "averageLatencyReduction": {
        "title": "å¹³åå»¶è¿éä½",
        "value": "45%"
      }
    },
    "performanceAI": {
      "title": "æ§è½ AI",
      "description": "éåºæ¨çç¡¬ä»¶éç½®åä½¿ç¨æ¨¡å¼çæºå¨å­¦ä¹ ç³»ç»ï¼ä»¥å®ç°æä½³æ§è½ã"
    },
    "globalNetwork": {
      "title": "å¨çç½ç»",
      "description": "éè¿æä»¬çå¨çæå¡å¨åºç¡è®¾æ½è·å¾ä¼åè·¯çº¿ï¼å¨ä»»ä½å°æ¹é½è½ä½å»¶è¿æ¸¸æã"
    },
    "cta": {
      "description": "éè¿æä»¬çèªéåºæ¸¸æææ¯ä½éªæ¾èçå»¶è¿éä½åæ§è½æåã",
      "startFreeTrial": "å¼å§åè´¹è¯ç¨",
      "viewPricing": "æ¥çä»·æ ¼"
    }
  },
  "games": {
    "meta": {
      "description": "ä½¿ç¨ GamePath AI ä¼åæ¨ç {game} ä½éªãåå°å»¶è¿ï¼æ¶é¤æ°æ®åä¸¢å¤±ï¼æé« FPSã"
    },
    "notFound": {
      "title": "æ¾ä¸å°æ¸¸æ",
      "message": "æ±æ­ï¼æä»¬æ¾ä¸å°å³äºè¿æ¬¾æ¸¸æçä¿¡æ¯ãè¯·æ£æ¥ URL ææ¢ç´¢æä»¬æ¯æçæ¸¸æã"
    },
    "hero": {
      "title": "ä¼åæ¨ç {game} ä½éª",
      "subtitle": "éè¿ GamePath AI çæ¸¸æç¹å®ä¼åï¼åå°å»¶è¿ï¼æé« FPSï¼è·å¾ç«äºä¼å¿ã",
      "optimizeNow": "ç«å³ä¼å",
      "learnMore": "äºè§£æ´å¤"
    },
    "metrics": {
      "latency": "å»¶è¿æ¹å",
      "fps": "FPS æå",
      "packetLoss": "æ°æ®åä¸¢å¤±åå°",
      "jitter": "æå¨åå°",
      "improvement": "æå",
      "reduction": "åå°"
    },
    "performanceMetrics": {
      "title": "{game} æ§è½ææ ",
      "subtitle": "ä½¿ç¨ GamePath AI æ¶ï¼æä»¬çç¨æ·å¨ææå³é®æ§è½é¢åé½çå°æ¾èæ¹åã"
    },
    "technicalImprovements": {
      "title": "{game} çææ¯æ¹è¿",
      "subtitle": "äºè§£æä»¬çææ¯ä¸ºæ¨çæ¸¸æä½éªå¸¦æ¥çåå®å·®å¼ã",
      "before": "ä¼åå",
      "after": "ä¼åå"
    },
    "testimonials": {
      "title": "{game} ç©å®¶è¯ä»·",
      "subtitle": "å¬å¬ç©å®¶ä»¬å¯¹ GamePath AI ä½éªçè¯ä»·ã"
    },
    "cta": {
      "title": "åå¤å¥½å¨ {game} ä¸­ä¸»å®°æåºäºåï¼",
      "description": "å å¥æ°ååéè¿ GamePath AI æ¹åæ¸¸æä½éªç {game} ç©å®¶ãå®ç°é«è¾¾ {latency}% çå»¶è¿éä½å {fps}% ç FPS æåã",
      "latencyReduction": "å»¶è¿éä½",
      "fpsImprovement": "FPS æå",
      "packetLossReduction": "æ°æ®åä¸¢å¤±åå°",
      "tryForFree": "åè´¹è¯ç¨",
      "exploreFeatures": "æ¢ç´¢åè½"
    },
    "card": {
      "viewDetails": "æ¥çè¯¦æ"
    }
  }
}
```

## 6. STYLES

### index.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply bg-cyber-black text-white;
  }
  
  main {
    @apply bg-cyber-black;
  }

  section {
    @apply py-6 md:py-8;
  }

  h1, h2, h3, h4, h5, h6 {
    @apply mb-4;
  }

  p {
    @apply mb-3 leading-relaxed;
  }
}

@layer components {
  .button-light, button[data-theme="light"] {
    background-color: rgba(255, 255, 255, 0.95) !important;
    color: #121223 !important; 
    font-weight: 600 !important;
    border: 1px solid rgba(51, 195, 240, 0.4) !important;
  }
  
  .button-light:hover, button[data-theme="light"]:hover {
    background-color: #ffffff !important;
    box-shadow: 0 0 10px rgba(51, 195, 240, 0.4) !important;
  }

  .cyber-panel {
    @apply bg-cyber-darkblue border border-cyber-blue/30 rounded-md p-4 shadow-lg shadow-cyber-blue/5 relative my-3;
  }
  
  /* Status tag styles */
  .tag-fully-optimized, .fully-optimized, [data-status="fully-optimized"] {
    @apply bg-green-500/20 text-green-400 border border-green-500/30 rounded px-3 py-1 text-xs font-tech shadow-sm shadow-green-500/10;
  }
  
  .tag-network-optimized, .network-optimized, [data-status="network-optimized"] {
    @apply bg-cyber-blue/20 text-cyber-blue border border-cyber-blue/30 rounded px-3 py-1 text-xs font-tech shadow-sm shadow-cyber-blue/10;
  }
  
  .tag-system-optimized, .system-optimized, [data-status="system-optimized"] {
    @apply bg-cyber-purple/20 text-cyber-purple border border-cyber-purple/30 rounded px-3 py-1 text-xs font-tech shadow-sm shadow-cyber-purple/10;
  }
  
  .tag-not-optimized, .not-optimized, [data-status="not-optimized"] {
    @apply bg-gray-500/20 text-gray-400 border border-gray-500/30 rounded px-3 py-1 text-xs font-tech shadow-sm shadow-gray-500/10;
  }
  
  /* Card and container styles */
  .card, .panel, .metric-card, .game-card, .route-card, .optimization-card, 
  [class*="card"], [class*="panel"], [class*="container"], .settings-section {
    @apply bg-cyber-darkblue border border-cyber-blue/40 rounded-md shadow-[0_0_20px_rgba(0,0,0,0.25)] hover:shadow-[0_0_25px_rgba(51,195,240,0.15)] transition-all duration-300 my-3 p-4;
  }
  
  .game-card, .game-container, .detected-game {
    @apply bg-[#151530] border-cyber-purple/30 hover:border-cyber-purple/50;
  }
  
  h1, h2, h3, h4, h5, .title, .heading {
    @apply text-white;
  }
  
  .metric-value, .current-value, .numeric-value, [class*="value"] {
    @apply text-cyber-blue;
  }
  
  /* Chart container sizing fixes */
  .chart-container, .graph-container, .chart-wrapper {
    @apply bg-transparent;
    max-height: 180px !important;
    height: 100% !important;
    position: relative !important;
    overflow: hidden !important;
  }
  
  /* Section spacing fixes */
  .dashboard-section, .metrics-container, .games-section, 
  .optimization-section, .route-section, .connection-section {
    @apply bg-cyber-black py-4 my-4;
  }

  /* Settings page spacing */
  .settings-section {
    @apply my-2 py-2;
  }

  .settings-section > div {
    margin-bottom: 0.5rem !important;
  }

  .settings-section > h2 {
    margin-bottom: 0.25rem !important;
    margin-top: 0.5rem !important;
  }

  /* Fix spacing in tabs */
  .tabs-content > div {
    margin-top: 0.25rem !important;
    margin-bottom: 0.25rem !important;
  }

  /* Fix icon sizing */
  [class*="lucide"], 
  svg[data-lucide] {
    width: 1.25rem !important;
    height: 1.25rem !important;
  }

  button [class*="lucide"],
  .button [class*="lucide"],
  button svg[data-lucide],
  .button svg[data-lucide] {
    width: 1rem !important;
    height: 1rem !important;
  }

  h1 [class*="lucide"],
  h2 [class*="lucide"],
  h3 [class*="lucide"],
  .heading [class*="lucide"] {
    width: 1.5rem !important;
    height: 1.5rem !important;
  }

  /* Neon text effects */
  .neon-blue {
    @apply text-cyber-blue drop-shadow-[0_0_8px_rgba(51,195,240,0.8)];
  }
  
  .neon-purple {
    @apply text-cyber-purple drop-shadow-[0_0_8px_rgba(139,92,246,0.8)];
  }

  .neon-green {
    @apply text-cyber-green drop-shadow-[0_0_8px_rgba(16,185,129,0.8)];
  }

  .neon-pink {
    @apply text-cyber-pink drop-shadow-[0_0_8px_rgba(236,72,153,0.8)];
  }
  
  .font-tech {
    @apply font-mono tracking-wide;
  }

  /* Pricing card effects */
  .pricing-card {
    @apply transition-all duration-300 hover:translate-y-[-5px];
  }

  /* Upgrade button scan line animation */
  .upgrade-pro-btn .scan-line {
    position: absolute;
    top: -100%;
    left: 0;
    width: 100%;
    height: 2px;
    background: linear-gradient(to right, transparent, rgba(51, 195, 240, 0.8), transparent);
    animation: laser-scan 3s ease-in-out infinite;
    z-index: 10;
  }

  @keyframes laser-scan {
    0%, 100% {
      top: -100%;
      opacity: 0;
    }
    25%, 75% {
      opacity: 1;
    }
    50% {
      top: 110%;
      opacity: 1;
    }
  }

  /* Feature card styles */
  .feature-card {
    @apply p-4 rounded-lg bg-cyber-darkblue border border-cyber-blue/30 shadow-lg hover:shadow-[0_0_20px_rgba(51,195,240,0.2)] transition-all duration-300 my-4;
  }

  .feature-icon {
    @apply w-12 h-12 rounded-full flex items-center justify-center mb-3;
  }

  /* Testimonial card styles */
  .testimonial-card {
    @apply rounded-lg border border-cyber-blue/30 bg-cyber-darkblue/50 p-4 shadow-lg hover:shadow-[0_0_20px_rgba(51,195,240,0.15)] transition-all duration-300 my-2;
  }

  /* Layout spacing */
  .feature-grid {
    @apply grid gap-6 md:gap-8 my-8;
  }

  .cta-section {
    @apply py-12 md:py-16 my-8;
  }

  /* Tab container styles */
  .tabs-container {
    @apply bg-cyber-darkblue/80 border border-cyber-blue/30 rounded-lg shadow-[0_0_35px_rgba(0,0,0,0.35)] p-4;
  }
  
  /* Visualization container styles */
  .visualization-container {
    @apply relative bg-cyber-darkblue/80 border border-cyber-blue/30 rounded-lg overflow-hidden shadow-[0_0_25px_rgba(51,195,240,0.2)] min-h-[240px] flex items-center justify-center;
  }

  /* Feature page visualization */
  .feature-page-visualization {
    @apply min-h-[260px] border-2 border-cyber-blue/50 shadow-[0_0_30px_rgba(51,195,240,0.3)];
  }
  
  /* Animation effects */
  .animated-feature {
    @apply transition-all duration-700 transform;
  }
  
  .animated-feature:hover {
    @apply scale-105;
  }
  
  /* Core tech item styles */
  .core-tech-item {
    @apply my-6 p-4 rounded-lg border border-cyber-blue/30 shadow-[0_0_25px_rgba(0,0,0,0.3)] hover:shadow-[0_0_30px_rgba(51,195,240,0.25)] transition-all duration-500;
  }
  
  /* Pulse glow animation */
  @keyframes pulse-glow {
    0%, 100% {
      box-shadow: 0 0 15px rgba(51, 195, 240, 0.2);
    }
    50% {
      box-shadow: 0 0 30px rgba(51, 195, 240, 0.5);
    }
  }
  
  .pulse-glow {
    animation: pulse-glow 3s infinite ease-in-out;
  }

  /* Recharts-specific fixes */
  .recharts-responsive-container {
    max-height: 180px !important;
    height: 100% !important;
  }

  .recharts-surface {
    overflow: visible;
  }

  /* Make sure axis labels are readable */
  .recharts-cartesian-axis-tick text {
    font-size: 10px !important;
    fill: rgba(255, 255, 255, 0.8) !important;
  }

  /* Fix tooltip styles */
  .recharts-tooltip-wrapper {
    z-index: 1000 !important;
  }

  .recharts-tooltip-item {
    display: flex;
    align-items: center;
    margin: 4px 0;
  }

  /* Fix dot rendering */
  .recharts-dot {
    r: 2px !important;
  }

  .recharts-active-dot {
    r: 4px !important;
  }

  /* Fix stroke width for lines */
  .recharts-line .recharts-curve {
    stroke-width: 2px !important;
  }

  /* Advanced Optimizer page fixes */
  .advanced-optimizer-page .chart-container,
  .machine-learning-summary .chart-container,
  .performance-page .chart-container {
    max-height: 180px !important;
  }

  /* Nested spacing reduction */
  .space-y-6 > .space-y-4,
  .space-y-5 > .space-y-4 {
    margin-top: 0.25rem !important;
    margin-bottom: 0.25rem !important;
  }

  .space-y-8 {
    margin-top: 1rem;
  }
  
  .space-y-8 > * {
    margin-top: 1rem !important;
    margin-bottom: 1rem !important;
  }
}
```

## 7. UTILITIES

### utils.ts
```typescript
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```

## 8. LAYOUTS

### AccountLayout.tsx
```typescript
import React from "react";
import Layout from "@/components/Layout";

interface AccountLayoutProps {
  children: React.ReactNode;
  requireSubscription?: boolean;
}

const AccountLayout: React.FC<AccountLayoutProps> = ({ children, requireSubscription = false }) => {
  return (
    <Layout requireSubscription={requireSubscription}>
      <div className="w-full max-w-7xl mx-auto px-4">
        {children}
      </div>
    </Layout>
  );
};

export default AccountLayout;
```

## 9. PAGES

### PaymentMethods.tsx
```typescript
import React, { useState } from "react";
import { Helmet } from "react-helmet-async";
import { useNavigate } from "react-router-dom";
import AccountLayout from "@/components/Layout/AccountLayout";
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { 
  CreditCard, 
  Plus, 
  Shield,
  AlertTriangle,
  Trash2,
  ArrowLeft,
  Lock
} from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { toast } from "sonner";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { useSubscription } from "@/hooks/use-subscription";
import { Skeleton } from "@/components/ui/skeleton";

const PaymentMethods = () => {
  const navigate = useNavigate();
  const { 
    paymentMethods, 
    isLoading, 
    addPaymentMethod, 
    setDefaultPaymentMethod, 
    deletePaymentMethod 
  } = useSubscription();
  
  const [isAddingCard, setIsAddingCard] = useState(false);
  const [cardToDelete, setCardToDelete] = useState<string | null>(null);
  
  const [newCard, setNewCard] = useState({
    cardNumber: "",
    cardholderName: "",
    expiryMonth: "",
    expiryYear: "",
    cvc: "",
    brand: "visa" // Default brand for demonstration
  });

  const handleGoBack = () => {
    navigate("/account");
  };

  const handleAddCard = async () => {
    try {
      // Basic form validation
      if (!newCard.cardholderName || !newCard.cardNumber || !newCard.expiryMonth || 
          !newCard.expiryYear || !newCard.cvc) {
        toast.error("Please fill out all fields");
        return;
      }
      
      // In a real implementation, this would call your API to add the card
      await addPaymentMethod({
        ...newCard,
        last4: newCard.cardNumber.slice(-4)
      });
      
      setIsAddingCard(false);
      
      // Reset form
      setNewCard({
        cardNumber: "",
        cardholderName: "",
        expiryMonth: "",
        expiryYear: "",
        cvc: "",
        brand: "visa"
      });
    } catch (error) {
      console.error("Failed to add payment method:", error);
    }
  };

  const handleDeleteCard = async (id: string) => {
    try {
      await deletePaymentMethod(id);
      setCardToDelete(null);
    } catch (error) {
      console.error("Failed to delete payment method:", error);
    }
  };

  const handleSetDefault = async (id: string) => {
    try {
      await setDefaultPaymentMethod(id);
    } catch (error) {
      console.error("Failed to set default payment method:", error);
    }
  };

  const formatExpiryDate = (month: number, year: number) => {
    return `${month.toString().padStart(2, '0')}/${year.toString().slice(-2)}`;
  };

  const isExpiryInvalid = (month: number, year: number) => {
    const now = new Date();
    const currentYear = now.getFullYear();
    const currentMonth = now.getMonth() + 1;
    
    return (year < currentYear || (year === currentYear && month < currentMonth));
  };

  return (
    <AccountLayout requireSubscription>
      <Helmet>
        <title>Payment Methods | GamePath AI</title>
      </Helmet>

      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <Button 
              variant="ghost" 
              size="sm" 
              className="mb-2"
              onClick={handleGoBack}
            >
              <ArrowLeft size={16} className="mr-1" />
              Back to Account
            </Button>
            <h1 className="text-2xl font-bold text-white">Payment Methods</h1>
            <p className="text-gray-400">Manage your payment options for GamePath AI</p>
          </div>
          <Dialog open={isAddingCard} onOpenChange={setIsAddingCard}>
            <DialogTrigger asChild>
              <Button variant="cyberAction">
                <Plus className="mr-2 h-4 w-4" />
                Add Payment Method
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[425px] bg-cyber-darkblue border-cyber-blue/30">
              <DialogHeader>
                <DialogTitle>Add Payment Method</DialogTitle>
                <DialogDescription>
                  Enter your card details to add a new payment method.
                </DialogDescription>
              </DialogHeader>
              <div className="grid gap-4 py-4">
                <div className="space-y-2">
                  <Label htmlFor="cardholderName">Cardholder Name</Label>
                  <Input
                    id="cardholderName"
                    placeholder="Name on card"
                    value={newCard.cardholderName}
                    onChange={(e) => setNewCard({...newCard, cardholderName: e.target.value})}
                    className="bg-cyber-darkblue border-gray-700"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="cardNumber">Card Number</Label>
                  <Input
                    id="cardNumber"
                    placeholder="1234 5678 9012 3456"
                    value={newCard.cardNumber}
                    onChange={(e) => setNewCard({...newCard, cardNumber: e.target.value})}
                    className="bg-cyber-darkblue border-gray-700"
                  />
                </div>
                <div className="grid grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="expiryMonth">Expiry Month</Label>
                    <Select
                      value={newCard.expiryMonth}
                      onValueChange={(value) => setNewCard({...newCard, expiryMonth: value})}
                    >
                      <SelectTrigger className="bg-cyber-darkblue border-gray-700">
                        <SelectValue placeholder="MM" />
                      </SelectTrigger>
                      <SelectContent className="bg-cyber-darkblue border-gray-700">
                        {Array.from({length: 12}, (_, i) => i + 1).map((month) => (
                          <SelectItem key={month} value={month.toString()}>
                            {month.toString().padStart(2, '0')}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="expiryYear">Expiry Year</Label>
                    <Select
                      value={newCard.expiryYear}
                      onValueChange={(value) => setNewCard({...newCard, expiryYear: value})}
                    >
                      <SelectTrigger className="bg-cyber-darkblue border-gray-700">
                        <SelectValue placeholder="YY" />
                      </SelectTrigger>
                      <SelectContent className="bg-cyber-darkblue border-gray-700">
                        {Array.from({length: 10}, (_, i) => new Date().getFullYear() + i).map((year) => (
                          <SelectItem key={year} value={year.toString()}>
                            {year}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="cvc">CVC</Label>
                    <Input
                      id="cvc"
                      placeholder="123"
                      value={newCard.cvc}
                      onChange={(e) => setNewCard({...newCard, cvc: e.target.value})}
                      className="bg-cyber-darkblue border-gray-700"
                    />
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="cardBrand">Card Type</Label>
                  <Select
                    value={newCard.brand}
                    onValueChange={(value) => setNewCard({...newCard, brand: value})}
                  >
                    <SelectTrigger className="bg-cyber-darkblue border-gray-700">
                      <SelectValue placeholder="Select card type" />
                    </SelectTrigger>
                    <SelectContent className="bg-cyber-darkblue border-gray-700">
                      <SelectItem value="visa">Visa</SelectItem>
                      <SelectItem value="mastercard">Mastercard</SelectItem>
                      <SelectItem value="amex">American Express</SelectItem>
                      <SelectItem value="discover">Discover</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <DialogFooter>
                <div className="flex items-center text-xs text-gray-400 mb-3 w-full">
                  <Lock className="h-3 w-3 mr-1" />
                  Your payment information is securely encrypted
                </div>
                <div className="flex gap-3 w-full">
                  <Button variant="outline" onClick={() => setIsAddingCard(false)} className="flex-1">
                    Cancel
                  </Button>
                  <Button variant="cyberAction" onClick={handleAddCard} className="flex-1">
                    Add Card
                  </Button>
                </div>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>

        <Card className="border-cyber-blue/30 bg-cyber-darkblue/60">
          <CardHeader className="border-b border-gray-800">
            <h2 className="text-xl font-semibold">Your Payment Methods</h2>
          </CardHeader>
          
          <CardContent className="pt-6">
            <div className="space-y-6">
              {isLoading ? (
                // Loading state
                Array.from({ length: 2 }).map((_, index) => (
                  <div key={index} className="p-4 border rounded-lg border-gray-700 bg-cyber-darkblue/50">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        <Skeleton className="w-12 h-8 rounded-md" />
                        <div>
                          <Skeleton className="h-5 w-32 mb-2" />
                          <Skeleton className="h-4 w-24" />
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Skeleton className="h-8 w-24" />
                        <Skeleton className="h-8 w-8" />
                      </div>
                    </div>
                  </div>
                ))
              ) : paymentMethods.length > 0 ? (
                paymentMethods.map((method) => (
                  <div 
                    key={method.id} 
                    className={`p-4 border rounded-lg flex items-center justify-between
                      ${method.isDefault 
                        ? 'border-cyber-blue bg-cyber-blue/10' 
                        : 'border-gray-700 bg-cyber-darkblue'
                      }
                    `}
                  >
                    <div className="flex items-center space-x-4">
                      <div className="w-12 h-8 bg-gray-800 rounded-md flex items-center justify-center">
                        <CreditCard className="h-5 w-5 text-gray-400" />
                      </div>
                      <div>
                        <div className="font-medium capitalize flex items-center">
                          {method.brand} â¢â¢â¢â¢ {method.last4}
                          {method.isDefault && (
                            <Badge variant="cyber" className="ml-2 py-0">Default</Badge>
                          )}
                        </div>
                        <div className="text-sm text-gray-400 flex items-center space-x-2">
                          <span>Expires {formatExpiryDate(method.expMonth || 0, method.expYear || 0)}</span>
                          {isExpiryInvalid(method.expMonth || 0, method.expYear || 0) && (
                            <span className="text-cyber-red flex items-center">
                              <AlertTriangle className="h-3 w-3 mr-1" />
                              Expired
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      {!method.isDefault && (
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => handleSetDefault(method.id)}
                        >
                          Set Default
                        </Button>
                      )}
                      
                      <AlertDialog open={cardToDelete === method.id} onOpenChange={(open) => {
                        if (!open) setCardToDelete(null);
                      }}>
                        <Button 
                          variant="destructive" 
                          size="sm"
                          onClick={() => setCardToDelete(method.id)}
                          disabled={paymentMethods.length === 1}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                        <AlertDialogContent className="bg-cyber-darkblue border-cyber-blue/30">
                          <AlertDialogHeader>
                            <AlertDialogTitle>Remove Payment Method</AlertDialogTitle>
                            <AlertDialogDescription>
                              Are you sure you want to remove this payment method?
                              {method.isDefault && (
                                <p className="mt-2 text-cyber-red">
                                  This is your default payment method. Removing it will affect your subscription.
                                </p>
                              )}
                            </AlertDialogDescription>
                          </AlertDialogHeader>
                          <AlertDialogFooter>
                            <AlertDialogCancel>Cancel</AlertDialogCancel>
                            <AlertDialogAction 
                              onClick={() => handleDeleteCard(method.id)}
                              className="bg-cyber-red hover:bg-cyber-red/80"
                            >
                              Remove
                            </AlertDialogAction>
                          </AlertDialogFooter>
                        </AlertDialogContent>
                      </AlertDialog>
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center p-12">
                  <CreditCard className="h-12 w-12 mx-auto mb-4 text-gray-400" />
                  <h3 className="text-lg font-medium mb-2">No Payment Methods</h3>
                  <p className="text-gray-400 mb-4">
                    You haven't added any payment methods yet.
                  </p>
                  <Button variant="cyberAction" onClick={() => setIsAddingCard(true)}>
                    <Plus className="mr-2 h-4 w-4" />
                    Add Payment Method
                  </Button>
                </div>
              )}
            </div>
          </CardContent>
          <CardFooter className="border-t border-gray-800 pt-6 flex flex-col items-start">
            <div className="bg-cyber-darkblue/50 border border-cyber-blue/20 rounded-lg p-4 w-full">
              <div className="flex items-start">
                <div className="bg-cyber-blue/20 p-2 rounded-full mr-4">
                  <Shield className="h-5 w-5 text-cyber-blue" />
                </div>
                <div>
                  <h5 className="font-medium text-sm">Secure Payment Processing</h5>
                  <p className="text-sm text-gray-400 mt-1">
                    Your payment information is securely encrypted and stored with bank-level security. 
                    We never store your full card details on our servers.
                  </p>
                </div>
              </div>
            </div>
          </CardFooter>
        </Card>
      </div>
    </AccountLayout>
  );
};

export default PaymentMethods;
```

## 10. ENTRY POINT

### main.tsx
```typescript
import { createRoot } from 'react-dom/client';
import { I18nextProvider } from 'react-i18next';
import i18n from './lib/i18n';
import App from './App.tsx';
import './index.css';

// Importar a fonte Inter
import '@fontsource/inter/400.css';  // Fonte regular
import '@fontsource/inter/600.css';  // Fonte semi-bold
import '@fontsource/inter/700.css';  // Fonte bold

// Import i18n configuration before rendering the app
import './lib/i18n.ts';
import { CheckoutProvider } from './contexts/CheckoutContext';

createRoot(document.getElementById("root")!).render(
  <I18nextProvider i18n={i18n}>
    <CheckoutProvider>
      <App />
    </CheckoutProvider>
  </I18nextProvider>
);
```
